# azure-pipelines.yml
# Copyright (c) 2018 Pablo Acosta-Serafini
# See LICENSE for details
# yamllint disable rule:document-start
# yamllint disable rule:line-length

trigger:
- master

jobs:

- job: 'Test'
  strategy:
    matrix:
      linux_python27:
        imageName: 'ubuntu-16.04'
        python.version: '2.7'
      linux_python37:
        imageName: 'ubuntu-16.04'
        python.version: '3.7'
      mac_python27:
        imageName: 'macos-10.13'
        python.version: '2.7'
      mac_python37:
        imageName: 'macos-10.13'
        python.version: '3.7'
      windows_python27:
        imageName: 'vs2017-win2016'
        python.version: '2.7'
      windows_python37:
        imageName: 'vs2017-win2016'
        python.version: '3.7'

  pool:
    vmImage: $(imageName)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: python --version
    displayName: Verify python version
  - bash: |
      git submodule init
      git submodule update
    displayName: Populate submodules
  - bash: |
      export INTERP=$(python -c 'from __future__ import print_function; import sys; info=sys.version_info; print("py{}{}".format(info.major, info.minor))')
      export PKG_NAME=$(basename $(Build.Repository.Name))
      export PKG_NAME_ALT=$(echo "${PKG_NAME}" | sed -r "s/(.*)-.*/\1/g")
      export PKG_VERSION=$(SHELLCHECK_CI_ENV=1 python -c "import os, sys; sys.path.append(os.path.realpath('.'));import setup; print(setup.__version__)")
      export PYTHON_SITE_PACKAGES=$(python -c "from __future__ import print_function;import os,pip;y=pip.__file__.split(os.sep);print(os.sep.join(y[:y.index('pip')]))")
      export REPO_DIR=$(Build.SourcesDirectory)
      export EXTRA_DIR=$(python -c "from __future__ import print_function; import sys; print(sys.prefix)")/share/${PKG_NAME}
      export SBIN_DIR=${EXTRA_DIR}/bin
      export RESULTS_DIR=${REPO_DIR}/results
      export SOURCE_DIR=${PYTHON_SITE_PACKAGES}/${PKG_NAME_ALT}
      export TRACER_DIR=${EXTRA_DIR}/docs/support
      export PYTHONPATH=${PYTHONPATH}:${PYTHON_SITE_PACKAGES}:${PYTHON_SITE_PACKAGES}/${PGK_NAME_ALT}:${EXTRA_DIR}:${EXTRA_DIR}/tests:${EXTRA_DIR}/docs:${EXTRA_DIR}/docs/support
      export COV_FILE=${SOURCE_DIR}/.coveragerc_ci_${INTERP}
      export AFILE=${EXTRA_DIR}/artifacts_${INTERP}.tar.gz
      export PYLINT_PLUGINS_DIR=${EXTRA_DIR}/pylint_plugins
      export SHELLCHECK_TEST_ENV=1
      echo "##vso[task.setvariable variable=INTERP]$INTERP"
      echo "##vso[task.setvariable variable=PKG_NAME]$PKG_NAME"
      echo "##vso[task.setvariable variable=PKG_NAME_ALT]$PKG_NAME_ALT"
      echo "##vso[task.setvariable variable=PKG_VERSION]$PKG_VERSION"
      echo "##vso[task.setvariable variable=PYTHON_SITE_PACKAGES]$PYTHON_SITE_PACKAGES"
      echo "##vso[task.setvariable variable=REPO_DIR]$REPO_DIR"
      echo "##vso[task.setvariable variable=EXTRA_DIR]$EXTRA_DIR"
      echo "##vso[task.setvariable variable=SBIN_DIR]$SBIN_DIR"
      echo "##vso[task.setvariable variable=RESULTS_DIR]$RESULTS_DIR"
      echo "##vso[task.setvariable variable=SOURCE_DIR]$SOURCE_DIR"
      echo "##vso[task.setvariable variable=TRACER_DIR]$TRACER_DIR"
      echo "##vso[task.setvariable variable=PYTHONPATH]$PYTHONPATH"
      echo "##vso[task.setvariable variable=COV_FILE]$COV_FILE"
      echo "##vso[task.setvariable variable=AFILE]$AFILE"
      echo "##vso[task.setvariable variable=PYLINT_PLUGINS_DIR]$PYLINT_PLUGINS_DIR"
      echo "##vso[task.setvariable variable=SHELLCHECK_TEST_ENV]$SHELLCHECK_TEST_ENV"
    displayName: Set up environment
  - script: |
      echo INTERP=$(INTERP)
      echo PKG_NAME=$(PKG_NAME)
      echo PKG_NAME_ALT=$(PKG_NAME_ALT)
      echo PKG_VERSION=$(PKG_VERSION)
      echo PYTHON_SITE_PACKAGES=$(PYTHON_SITE_PACKAGES)
      echo REPO_DIR=$(REPO_DIR)
      echo EXTRA_DIR=$(EXTRA_DIR)
      echo SBIN_DIR=$(SBIN_DIR)
      echo RESULTS_DIR=$(RESULTS_DIR)
      echo SOURCE_DIR=$(SOURCE_DIR)
      echo TRACER_DIR=$(TRACER_DIR)
      echo PYTHONPATH=$(PYTHONPATH)
      echo COV_FILE=$(COV_FILE)
      echo AFILE=$(AFILE)
      echo PYLINT_PLUGINS_DIR=$(PYLINT_PLUGINS_DIR)
      echo SHELLCHECK_TEST_ENV=$(SHELLCHECK_TEST_ENV)
    displayName: Print environment
  - bash: |
      if ! python -m pip install --upgrade pip; then
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python get-pip.py
      fi
      pip --version
    displayName: Upgrade pip
  - bash:
      sudo apt-get install hunspell shellcheck
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Install hunspell and shellcheck (Linux)
  - bash:
      HOMEBREW_NO_AUTO_UPDATE=1 brew install hunspell shellcheck
    condition: eq( variables['Agent.OS'], 'Darwin' )
    displayName: Install hunspell and shellcheck (macOS)
  - powershell: |
      # hunspell
      Invoke-WebRequest -OutFile .\hunspell.zip -Uri "https://cfhcable.dl.sourceforge.net/project/ezwinports/hunspell-1.3.2-3-w32-bin.zip" -Headers @{"Upgrade-Insecure-Requests"="1"; "DNT"="1"; "User-Agent"="Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"; "Accept"="text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"; "Referer"="https://sourceforge.net/projects/ezwinports/files/hunspell-1.3.2-3-w32-bin.zip/download"; "Accept-Encoding"="gzip, deflate, br"; "Accept-Language"="en-US,en;q=0.9"; "Cookie"="_ga=GA1.2.960330120.1549548167; _gid=GA1.2.253466023.1549548167; _scp=1549548167671.1888783760; _scs=1549548167673.1210103215; __gads=ID=13f7ab9f14784468:T=1549548167:S=ALNI_MatktSjb46-gGUtEr9aCuvgPeSgLQ"}
      7z e .\hunspell.zip -o~\hunspell
      # shellcheck
      iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
      scoop install shellcheck
      # Update path
      Write-Host "##vso[task.setvariable variable=PATH;]${env:PATH};~\hunspell;~\hunspell\bin;~\scoop\shims;~\scoop\apps\shellcheck\current";
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install hunspell and shellcheck (Windows)
  - script: shellcheck --version
    displayName: Verify shellcheck in path
  - script: hunspell --version
    displayName: Verify hunspell in path
  - bash: |
      mkdir -p $(RESULTS_DIR)/testresults
      mkdir -p $(RESULTS_DIR)/codecoverage
      mkdir -p $(RESULTS_DIR)/artifacts
    displayName: Create directories
  - bash: |
      python setup.py sdist --formats=zip
      cd "$(PYTHON_SITE_PACKAGES)" || exit 1
      pip install --upgrade "$(REPO_DIR)/dist/$(PKG_NAME)-${PKG_VERSION}.zip"
    displayName: Install package
  - bash: |
      echo REPO_DIR=$(REPO_DIR)
      ls $(REPO_DIR)
      echo SOURCE_DIR=$(SOURCE_DIR)
      ls $(SOURCE_DIR)
      echo EXTRA_DIR=$(EXTRA_DIR)
      ls $(EXTRA_DIR)
      if [ -d $(EXTRA_DIR)/tests ]; then
        echo EXTRA_DIR/tests=$(EXTRA_DIR)/tests
        ls $(EXTRA_DIR)/tests
      fi
      if [ -d $(EXTRA_DIR)/tests/support ]; then
        echo EXTRA_DIR/tests=$(EXTRA_DIR)/tests/support
        ls $(EXTRA_DIR)/tests/support
      fi
    displayName: List relevant directories
  - bash: |
      $(SBIN_DIR)/make-coveragerc.sh 'ci' "$(INTERP)" "$(SOURCE_DIR)" "$(EXTRA_DIR)"
      cat "$(COV_FILE)"
    displayName: Create coverage config file
  - bash: |
      # Auto-detect installed plugins
      export PYLINT_PLUGINS_DIR=$(if [ -d "$(EXTRA_DIR)/pylint_plugins" ]; then echo "$(EXTRA_DIR)/pylint_plugins"; fi)
      export PYLINT_PLUGINS_LIST=$(if [ -d "$(EXTRA_DIR)/pylint_plugins" ]; then cd "$(EXTRA_DIR)/pylint_plugins" && ls -m *.py | sed 's|.*/||g' | sed 's|, |,|g' | sed 's|\.py||g'; fi)
      export PYLINT_CLI_APPEND=$(if [ -d "$(EXTRA_DIR)/pylint_plugins" ]; then echo "--load-plugins=${PYLINT_PLUGINS_LIST}"; fi)
      export PYLINT_CMD="pylint --rcfile=$(EXTRA_DIR)/.pylintrc ${PYLINT_CLI_APPEND} --output-format=colorized --reports=no --score=no"
      echo PYLINT_PLUGINS_DIR="${PYLINT_PLUGINS_DIR}"
      echo PYLINT_PLUGINS_LIST="${PYLINT_PLUGINS_LIST}"
      echo PYLINT_CLI_APPEND="${PYLINT_CLI_APPEND}"
      echo PYLINT_CMD="${PYLINT_CMD}"
      # Check
      if [ -f "$(REPO_DIR)/*.py" ]; then
        echo Checking base directory
        PYTHONPATH="$(PYTHONPATH):${PYLINT_PLUGINS_DIR}" ${PYLINT_CMD} $(REPO_DIR)/*.py
      fi
      if [ -f "$(SOURCE_DIR)/*.py" ]; then
        echo Checking source directory
        PYTHONPATH="$(PYTHONPATH):${PYLINT_PLUGINS_DIR}" ${PYLINT_CMD} $(SOURCE_DIR)/*.py
      fi
      if [ -f "$(EXTRA_DIR)/tests/*.py" ]; then
        echo Checking tests base directory
        PYTHONPATH="$(PYTHONPATH):${PYLINT_PLUGINS_DIR}" ${PYLINT_CMD} $(EXTRA_DIR)/tests/*.py
      fi
      if [ -f "$(EXTRA_DIR)/tests/support/*.py" ]; then
        echo Checking tests support directory
        PYTHONPATH="$(PYTHONPATH):${PYLINT_PLUGINS_DIR}" ${PYLINT_CMD} $(EXTRA_DIR)/tests/support/*.py
      fi
    displayName: Check code standards compliance
  - bash: |
      cd $(EXTRA_DIR)/tests || exit 1
      if pytest --collect-only --doctest-glob="*.rst" $(EXTRA_DIR)/docs &> /dev/null; then
          pytest --doctest-glob="*.rst" $(EXTRA_DIR)/docs
      fi
      if pytest --collect-only --doctest-modules $(SOURCE_DIR) &> /dev/null; then
          pytest --doctest-modules $(SOURCE_DIR)
      fi
      pytest --cov-config $(COV_FILE) --cov $(SOURCE_DIR) --cov-report xml
      if [ -f $(SBIN_DIR)/build_docs.py ]; then
          $(SBIN_DIR)/build_docs.py -r -t -d $(SOURCE_DIR)
      fi
    displayName: Unit tests
