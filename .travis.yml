# .travis.yml
# Copyright (c) 2018 Pablo Acosta-Serafini
# See LICENSE for details

os:
  - linux
  # - osx

sudo: required

dist: trusty

language: python

python:
  - "2.7"
  - "3.5"
  - "3.6"
  - "3.7"

env:
  # - JNAME="2.7"
  # - JNAME="3.5"
  # - JNAME="3.6"
  # - JNAME="3.7"

before_install:
  - env
  - export PYTHONCMD=python
  - export PYTESTCMD=pytest
  - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
        export PIPCMD=${PYTHONCMD} -W 'ignore:a true SSLContext object' -m pip
        export INTERP=py"${JNAME//./}";
        export PKG_NAME=$(echo ${TRAVIS_REPO_SLUG} | sed -E "s|.*/(.*)|\1|g");
        wget https://repo.continuum.io/archive/Anaconda2-2.4.0-MacOSX-x86_64.sh;
        bash Anaconda2-2.4.0-MacOSX-x86_64.sh -b;
        export PATH=/Users/travis/anaconda2/bin/:${PATH};
        conda update -y conda;
        conda create -y --name ${INTERP} python=${JNAME};
        source activate ${INTERP};
        export PATH=/Users/travis/anaconda2/envs/${INTERP}/bin:${PATH};
        export PYTHON_SITE_PACKAGES=$(pip show pip | grep "Location*" | sed -E "s/^.*Location\W (.*)/\1/g");
        ${PIPCMD} install --disable-pip-version-check --upgrade pip setuptools wheel;
    fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        export PIPCMD=pip
        export INTERP=py"${TRAVIS_PYTHON_VERSION//./}";
        export PKG_NAME=$(echo ${TRAVIS_REPO_SLUG} | sed -r "s|.*/(.*)|\1|g");
        export PYTHON_SITE_PACKAGES=$(${PIPCMD} show pip | grep "Location*" | sed -r "s/^.*Location\W (.*)/\1/g");
    fi
  ###
  # Set up environment variables
  ###
  - export REPO_DIR=${TRAVIS_BUILD_DIR}
  - export VIRTUALENV_DIR=$(dirname $(dirname $(dirname ${PYTHON_SITE_PACKAGES})))
  - export BIN_DIR=${VIRTUALENV_DIR}/bin
  - export EXTRA_DIR=$(python -c "from __future__ import print_function; import sys; print(sys.prefix)")/share/${PKG_NAME}
  - export SBIN_DIR=${EXTRA_DIR}/bin
  - export RESULTS_DIR=${REPO_DIR}/results
  - export SOURCE_DIR=${PYTHON_SITE_PACKAGES}/${PKG_NAME}
  - export TRACER_DIR=${EXTRA_DIR}/docs/support
  - export PYTHONPATH=${PYTHONPATH}:${PYTHON_SITE_PACKAGES}:${EXTRA_DIR}:${EXTRA_DIR}/tests:${EXTRA_DIR}/docs:${EXTRA_DIR}/docs/support
  - export COV_FILE=${SOURCE_DIR}/.coveragerc_ci_${INTERP}
  - export REQUIREMENTS_FILE=${REPO_DIR}/requirements.txt
  - export AFILE=${EXTRA_DIR}/artifacts_${INTERP}.tar.gz
  - echo "PYTHONCMD=${PYTHONCMD}"
  - echo "PIPCMD=${PIPCMD}"
  - echo "PYTESTCMD=${PYTESTCMD}"
  - echo "INTERP=${INTERP}"
  - echo "PKG_NAME=${PKG_NAME}"
  - echo "PYTHON_SITE_PACKAGES=${PYTHON_SITE_PACKAGES}"
  - echo "REPO_DIR=${REPO_DIR}"
  - echo "VIRTUALENV_DIR=${VIRTUALENV_DIR}"
  - echo "BIN_DIR=${BINDIR}"
  - echo "EXTRA_DIR=${EXTRA_DIR}"
  - echo "SBIN_DIR=${SBIN_DIR}"
  - echo "RESULTS_DIR=${RESULTS_DIR}"
  - echo "SOURCE_DIR=${SOURCE_DIR}"
  - echo "TRACER_DIR=${TRACER_DIR}"
  - echo "PYTHONPATH=${PYTHONPATH}"
  - echo "COV_FILE=${COV_FILE}"
  - echo "REQUIREMENTS_FILE=${REQUIREMENTS_FILE}"
  - echo "AFILE=${AFILE}"
  ###
  # Install tools and dependencies of package dependencies
  ###
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        sudo apt-get update;
        sudo apt-get install -qq -y aspell;
    fi

install:
  ###
  # Report version numbers for all compiled packages installed
  ###
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        dpkg --status aspell;
    fi
  ###
  # Install package dependencies
  ###
  - travis_wait ${PIPCMD} install -r${REQUIREMENTS_FILE}
  - ${PIPCMD} install codecov
  - ${PIPCMD} freeze

before_script:
  ###
  # Create directories for reports and artifacts
  ###
  - mkdir -p ${RESULTS_DIR}/testresults
  - mkdir -p ${RESULTS_DIR}/codecoverage
  - mkdir -p ${RESULTS_DIR}/artifacts

script:
  ###
  # Install package
  ###
  - cat ${REPO_DIR}/MANIFEST.in
  - ${PYTHONCMD} setup.py sdist
  # Change directory away from repository, otherwise pip does not install package
  - cd ${REPO_DIR}
  - export PKG_VERSION=$(python -c "import os, sys; sys.path.append(os.path.realpath('./'+os.environ['PKG_NAME']));import version; print(version.__version__)")
  - echo "PKG_VERSION=${PKG_VERSION}"
  - cd ${PYTHON_SITE_PACKAGES}
  - ${PIPCMD} install ${REPO_DIR}/dist/${PKG_NAME}-${PKG_VERSION}.tar.gz
  ###
  # Write coverage configuration file
  ###
  - ${PYTHONCMD} ${SBIN_DIR}/coveragerc_manager.py 'ci' 1 ${INTERP} ${PYTHON_SITE_PACKAGES}
  - cat ${COV_FILE}
  ###
  # Change to tests sub-directory to mimic Tox conditions
  ###
  - cd ${EXTRA_DIR}/tests
  ###
  # Run tests
  ###
  - ${SBIN_DIR}/cprint.sh line cyan "Testing project code compliance"
  - ${SBIN_DIR}/check_files_compliance.py -tps -d ${SOURCE_DIR} -m ${EXTRA_DIR}
  - ${SBIN_DIR}/cprint.sh line cyan "Testing Pylint compliance"
  - pylint --rcfile=${EXTRA_DIR}/.pylintrc -f colorized -r no ${SOURCE_DIR}
  - pylint --rcfile=${EXTRA_DIR}/.pylintrc -f colorized -r no ${SBIN_DIR}
  - pylint --rcfile=${EXTRA_DIR}/.pylintrc -f colorized -r no ${EXTRA_DIR}/tests
  - pylint --rcfile=${EXTRA_DIR}/.pylintrc -f colorized -r no ${EXTRA_DIR}/tests/support
  - ${SBIN_DIR}/cprint.sh line cyan "Testing reStructuredText files"
  - if [ ${PYTESTCMD} --collect-only --doctest-glob="*.rst" ${EXTRA_DIR}/docs ]; then
        ${PYTESTCMD} --doctest-glob="*.rst" ${EXTRA_DIR}/docs;
    fi
  - ${SBIN_DIR}/cprint.sh line cyan "Testing docstrings"
  - ${PYTESTCMD} --doctest-modules ${SOURCE_DIR}
  # Coverage tests runs all the unit tests, no need to run the non-coverage
  # tests since the report is not being used
  # - ${SBIN_DIR}/cprint.sh line cyan "Testing code"
  # - ${PYTESTCMD} -s -vv --junitxml=${RESULTS_DIR}/testresults/pytest.xml
  - ${SBIN_DIR}/cprint.sh line cyan "Testing coverage"
  - ${PYTESTCMD} --cov-config ${COV_FILE} --cov ${SOURCE_DIR} --cov-report xml
  - ${SBIN_DIR}/cprint.sh line cyan "Testing documentation"
  - ${SBIN_DIR}/build_docs.py -r -t -d ${SOURCE_DIR}

notifications:
  email:
    on_success: change
    on_failure: always

after_success:
  - if [ "${CODECOV_TOKEN}" != "" ]; then
        cd ${REPO_DIR};
        cp ${RESULTS_DIR}/codecoverage/coverage.xml ${REPO_DIR}/.;
        export DOT_SOURCE_DIR=${SOURCE_DIR//\//.};
        export DOT_REPO_DIR=${REPO_DIR//\//.};
        sed -r -i -e "s|${SOURCE_DIR}|${REPO_DIR}/${PKG_NAME}|g" coverage.xml;
        sed -r -i -e "s|${DOT_SOURCE_DIR}|${DOT_REPO_DIR}.${PKG_NAME}|g" coverage.xml;
        codecov --token=${CODECOV_TOKEN} --file=${REPO_DIR}/coverage.xml;
    fi

after_failure:
  - ${SBIN_DIR}/zip-artifacts.sh ${INTERP}
  - if [ -f "${AFILE}" ]; then
        ${REPO_DIR}/bin/dropbox_uploader.sh upload ${AFILE} .;
    else
        echo "Artifacts could not be exported";
    fi
